import os
import logging
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.enums.parse_mode import ParseMode
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Update
from aiogram.ext.contexts import ContextTypes

API_URL = os.getenv("API_URL")
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
class OrganizationStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_description = State()
    waiting_for_menu = State()

async def register_user(user_id: int) -> bool:
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(f"{API_URL}/register_user?tid={user_id}") as resp:
                if resp.status == 200:
                    user_data = await resp.json()
                    logger.info(f"User {user_id} registered successfully: {user_data}")
                    return True
                else:
                    error_text = await resp.text()
                    logger.error(f"Failed to register user {user_id}: {error_text}")
                    return False
    except Exception as e:
        logger.error(f"Error registering user {user_id}: {str(e)}")
        return False

def get_main_buttons() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É", callback_data="create_table")],
            [InlineKeyboardButton(text="üè¢ –ú–æ–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏", callback_data="my_organizations")],
            [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
    )
    return keyboard

def get_help_buttons() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí¨ –ß–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏", url="https://t.me/rabbit_bot_chat")],
            [InlineKeyboardButton(text="üë• –ì—Ä—É–ø–ø–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π", url="https://t.me/rabbit_bot_group")],
            [InlineKeyboardButton(text="üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", url="https://t.me/rabbit_bot_docs")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
    )
    return keyboard

def get_organization_buttons() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é", callback_data="create_org")],
            [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
    )
    return keyboard

def log_user_info(message: Message):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    user = message.from_user
    chat = message.chat
    logger.info(
        f"User Info:\n"
        f"User ID: {user.id}\n"
        f"Username: @{user.username}\n"
        f"First Name: {user.first_name}\n"
        f"Last Name: {user.last_name}\n"
        f"Language: {user.language_code}\n"
        f"Chat Type: {chat.type}\n"
        f"Chat ID: {chat.id}\n"
        f"Message Text: {message.text}"
    )

@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    log_user_info(message)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.message_id == 1:
        success = await register_user(message.from_user.id)
        if success:
            await message.answer(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
                "–Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/menu - –ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ–Ω—é\n"
                "/create_org - –°–æ–∑–¥–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é\n"
                "/help - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å",
                reply_markup=get_main_buttons()
            )
        else:
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    else:
        await message.answer(
            "üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!\n\n"
            "–Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/menu - –ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ–Ω—é\n"
            "/create_org - –°–æ–∑–¥–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é\n"
            "/help - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å",
            reply_markup=get_main_buttons()
        )

@dp.callback_query(lambda c: c.data == "create_org")
async def create_org_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"""
    await callback_query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:"
    )
    await state.set_state(OrganizationStates.waiting_for_name)
    await callback_query.answer()

@dp.message(OrganizationStates.waiting_for_name)
async def process_org_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"""
    await state.update_data(org_name=message.text)
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:"
    )
    await state.set_state(OrganizationStates.waiting_for_description)

@dp.message(OrganizationStates.waiting_for_description)
async def process_org_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"""
    await state.update_data(org_description=message.text)
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –º–µ–Ω—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV –∏–ª–∏ Excel.\n"
        "–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–µ–¥—É—é—â–∏–º:\n"
        "name,price,category,description,subcategory\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "–ü–∏—Ü—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞,450,–ü–∏—Ü—Ü–∞,–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –ø–∏—Ü—Ü–∞ —Å —Ç–æ–º–∞—Ç–∞–º–∏ –∏ –º–æ—Ü–∞—Ä–µ–ª–ª–æ–π,–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è"
    )
    await state.set_state(OrganizationStates.waiting_for_menu)

@dp.message(OrganizationStates.waiting_for_menu)
async def process_org_menu(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –º–µ–Ω—é"""
    if not message.document:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –º–µ–Ω—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV –∏–ª–∏ Excel."
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    org_name = data.get('org_name')
    org_description = data.get('org_description')

    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_path = f"temp_{message.document.file_id}.{message.document.file_name.split('.')[-1]}"
        await bot.download(message.document, destination=file_path)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ API
        async with aiohttp.ClientSession() as session:
            # –°–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with session.post(f"{API_URL}/register_user?tid={message.from_user.id}") as resp:
                if resp.status != 200:
                    raise Exception(f"Failed to register user: {await resp.text()}")
                user = await resp.json()

            # –°–æ–∑–¥–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
            form_data = aiohttp.FormData()
            form_data.add_field('name', org_name)
            form_data.add_field('description', org_description)
            form_data.add_field('owner_id', str(user['id']))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users

            async with session.post(f"{API_URL}/organizations", data=form_data) as resp:
                if resp.status != 200:
                    raise Exception(f"Failed to create organization: {await resp.text()}")
                org = await resp.json()

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ–Ω—é
            with open(file_path, 'rb') as f:
                files = {'file': f}
                async with session.post(f"{API_URL}/organizations/{org['id']}/menu", data=files) as resp:
                    if resp.status != 200:
                        raise Exception(f"Failed to upload menu: {await resp.text()}")

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(file_path)

        await message.answer(
            f"‚úÖ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è '{org_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "/menu - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é\n"
            "/help - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å"
        )
    except Exception as e:
        logger.error(f"Error creating organization: {str(e)}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    finally:
        await state.clear()

@dp.callback_query(lambda c: c.data == "create_menu")
async def create_table_callback(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "/create_table [–Ω–∞–∑–≤–∞–Ω–∏–µ]"
    )
    await callback_query.answer()

@dp.callback_query(lambda c: c.data == "help")
async def help_callback(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(
        "üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
        "1. –ù–∞–∂–º–∏—Ç–µ 'üìù –°–æ–∑–¥–∞—Ç—å –ú–µ–Ω—é –û—Ä–≥–∞–Ω–∏—Ü–∞—Ü–∏–∏'\n"
        "2. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã\n"
        "3. –ì–æ—Ç–æ–≤–æ! –¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞\n\n"
        "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:",
        reply_markup=get_help_buttons()
    )
    await callback_query.answer()

@dp.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main_callback(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_buttons()
    )
    await callback_query.answer()

@dp.message(Command("create_org"))
async def cmd_create_org(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /create_org"""
    log_user_info(message)
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:"
    )
    await state.set_state(OrganizationStates.waiting_for_name)

@dp.message(Command("create_table"))
async def create_table(message: Message):
    log_user_info(message)
    parts = message.text.split(maxsplit=1)
    if len(parts) != 2:
        await message.answer(
            "‚ùó –£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ: /create_table BarName",
            reply_markup=get_main_buttons()
        )
        return
    bar_name = parts[1].strip()
    async with aiohttp.ClientSession() as session:
        async with session.post(f"{API_URL}/create_table/{bar_name}") as resp:
            if resp.status == 200:
                await message.answer(
                    f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ '{bar_name}' —Å–æ–∑–¥–∞–Ω–∞.",
                    reply_markup=get_main_buttons()
                )
            else:
                await message.answer(
                    f"‚ùå –û—à–∏–±–∫–∞: {await resp.text()}",
                    reply_markup=get_main_buttons()
                )

@dp.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    log_user_info(message)
    
    help_text = (
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/menu - –ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ–Ω—é\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )
    
    await message.answer(help_text)

@dp.message(Command("menu"))
async def cmd_menu(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu"""
    log_user_info(message)
    
    try:
        async with aiohttp.ClientSession() as session:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with session.get(f"{API_URL}/organizations?owner_id={message.from_user.id}") as resp:
                if resp.status != 200:
                    raise Exception(f"Failed to get organizations: {await resp.text()}")
                organizations = await resp.json()

            if not organizations:
                await message.answer(
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π. –°–æ–∑–¥–∞–π—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π /create_org"
                )
                return

            # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—ë –º–µ–Ω—é
            if len(organizations) == 1:
                org = organizations[0]
                await show_organization_menu(message, org['id'])
                return

            # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text=org['name'], callback_data=f"show_menu_{org['id']}")]
                    for org in organizations
                ]
            )
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é, –º–µ–Ω—é –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:",
                reply_markup=keyboard
            )
    except Exception as e:
        logger.error(f"Error fetching menu: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def show_organization_menu(message: Message, org_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"""
    try:
        async with aiohttp.ClientSession() as session:
            # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            async with session.get(f"{API_URL}/organizations/{org_id}/menu") as resp:
                if resp.status != 200:
                    raise Exception(f"Failed to get menu: {await resp.text()}")
                menu_items = await resp.json()
                
                if not menu_items:
                    await message.answer("üìã –ú–µ–Ω—é –ø—É—Å—Ç–æ")
                    return
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –±–ª—é–¥–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                categories = {}
                for item in menu_items:
                    if item['is_available']:
                        category = item['category']
                        if category not in categories:
                            categories[category] = []
                        categories[category].append(item)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                menu_text = "üìã –ù–∞—à–µ –º–µ–Ω—é:\n\n"
                
                for category, items in categories.items():
                    menu_text += f"üçΩ {category}:\n"
                    for item in items:
                        price = float(item['price'])
                        menu_text += f"‚Ä¢ {item['name']} - {price:.2f} ‚ÇΩ\n"
                        if item.get('description'):
                            menu_text += f"  {item['description']}\n"
                    menu_text += "\n"
                
                await message.answer(menu_text)
    except Exception as e:
        logger.error(f"Error showing menu: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query(lambda c: c.data.startswith("show_menu_"))
async def show_menu_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ–Ω—é"""
    org_id = int(callback_query.data.split("_")[2])
    await show_organization_menu(callback_query.message, org_id)
    await callback_query.answer()

@dp.callback_query(lambda c: c.data == "my_organizations")
async def my_organizations_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏'"""
    try:
        async with aiohttp.ClientSession() as session:
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            async with session.get(f"{API_URL}/users/telegram/{callback_query.from_user.id}") as resp:
                if resp.status != 200:
                    raise Exception(f"Failed to get user: {await resp.text()}")
                user = await resp.json()

            # –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ ID –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            async with session.get(f"{API_URL}/organizations?owner_id={user['id']}") as resp:
                if resp.status != 200:
                    raise Exception(f"Failed to get organizations: {await resp.text()}")
                organizations = await resp.json()

            if not organizations:
                await callback_query.message.edit_text(
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π. –°–æ–∑–¥–∞–π—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π /create_org",
                    reply_markup=get_main_buttons()
                )
                return

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text=org['name'], callback_data=f"org_actions_{org['id']}")]
                    for org in organizations
                ] + [[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
            )

            await callback_query.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é:",
                reply_markup=keyboard
            )
    except Exception as e:
        logger.error(f"Error fetching organizations: {str(e)}")
        await callback_query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_buttons()
        )
    await callback_query.answer()

@dp.callback_query(lambda c: c.data.startswith("org_actions_"))
async def organization_actions_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π"""
    org_id = int(callback_query.data.split("_")[2])
    
    try:
        async with aiohttp.ClientSession() as session:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            async with session.get(f"{API_URL}/organizations/{org_id}") as resp:
                if resp.status != 200:
                    raise Exception(f"Failed to get organization: {await resp.text()}")
                org = await resp.json()

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é", callback_data=f"show_menu_{org_id}")],
                    [InlineKeyboardButton(text="üåê –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—É", callback_data=f"generate_web_{org_id}")],
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="my_organizations")]
                ]
            )

            await callback_query.message.edit_text(
                f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {org['name']}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {org['description'] or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=keyboard
            )
    except Exception as e:
        logger.error(f"Error in organization actions: {str(e)}")
        await callback_query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_buttons()
        )
    await callback_query.answer()

@dp.callback_query(lambda c: c.data.startswith("generate_web_"))
async def generate_web_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏–∑ callback_data
    org_id = int(query.data.split(':')[1])
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{API_URL}/api/themes") as response:
                if response.status == 200:
                    data = await response.json()
                    themes = data['themes']
                else:
                    await query.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–µ–º")
                    return
    except Exception as e:
        await query.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–µ–º: {str(e)}")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ–º–∞–º–∏
    keyboard = []
    for theme_id, theme_name in themes.items():
        keyboard.append([InlineKeyboardButton(
            theme_name,
            callback_data=f"theme:{org_id}:{theme_id}"
        )])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –º–µ–Ω—é:",
        reply_markup=reply_markup
    )

async def theme_selected_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã"""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ —Ç–µ–º—É –∏–∑ callback_data
    _, org_id, theme = query.data.split(':')
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–µ–Ω—é
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{API_URL}/api/organizations/{org_id}/menu/generate",
                json={"theme": theme}
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    url = data['url']
                    await query.message.reply_text(
                        f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–µ–Ω—é —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n"
                        f"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—ë –ø–æ —Å—Å—ã–ª–∫–µ:\n{url}"
                    )
                else:
                    error_data = await response.json()
                    await query.message.reply_text(
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {error_data.get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                    )
    except Exception as e:
        await query.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {str(e)}")

if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))