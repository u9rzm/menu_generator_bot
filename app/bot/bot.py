import os
import logging
import aiohttp
# from collections import defaultdict
from aiogram import Bot, Dispatcher, types
from aiogram.enums.parse_mode import ParseMode
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, ContentType
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Update
import traceback

API_URL = os.getenv("API_URL")
BOT_TOKEN = os.getenv("BOT_TOKEN")
GEN_URL ='http://genhtm:2424'
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)
#Bot autorization
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())
# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
class OrganizationStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_description = State()
    waiting_for_type = State()
    waiting_for_menu = State()
    waiting_for_description_images = State()
    waiting_for_images = State()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∞–ª—å–±–æ–º–æ–≤
SAVE_FOLDER = "static/images"
os.makedirs(SAVE_FOLDER, exist_ok=True)
# media_groups = #defaultdict(list)

#Buttons__________________________________________________________________________________________
#Main menu
def get_main_buttons() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é", callback_data="create_org")],
            [InlineKeyboardButton(text="üè¢ –ú–æ–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏", callback_data="my_organizations")],
            [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
    )
    return keyboard
#Help menu
def get_help_buttons() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí¨ –ß–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏", url="https://t.me/rabbit_bot_chat")],
            [InlineKeyboardButton(text="üë• –ì—Ä—É–ø–ø–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π", url="https://t.me/rabbit_bot_group")],
            [InlineKeyboardButton(text="üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", url="https://t.me/rabbit_bot_docs")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
    )
    return keyboard
#Theme menu
def get_theme_buttons(org_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–µ–º–Ω—ã–π", callback_data=f"theme_{org_id}_modern-dark")],
            [InlineKeyboardButton(text="–°–≤–µ—Ç–ª—ã–π —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π", callback_data=f"theme_{org_id}_light-elegant")],
            [InlineKeyboardButton(text="–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π", callback_data=f"theme_{org_id}_minimal")],
            [InlineKeyboardButton(text="–í–∏–Ω—Ç–∞–∂–Ω—ã–π", callback_data=f"theme_{org_id}_vintage")],
            [InlineKeyboardButton(text="–§—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π", callback_data=f"theme_{org_id}_futuristic")],
            [InlineKeyboardButton(text="–ü—Ä–∏—Ä–æ–¥–Ω—ã–π", callback_data=f"theme_{org_id}_nature")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"org_actions_{org_id}")]
        ]
    )
    return keyboard
#Back menu
def get_action_before_create_buttons(org_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìã –ó–∞–≥—Ä—É–∑–∏—Ç—å –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data=f"upload_images_{org_id}")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏", callback_data=f"org_actions_{org_id}")]
        ]
    )
    return keyboard

def get_back_to_org_buttons(org_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏", callback_data=f"org_actions_{org_id}")]
        ]
    )
    return keyboard
def log_user_info(message: Message):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    user = message.from_user
    chat = message.chat
    logger.info(
        f"User Info:\n"
        f"User ID: {user.id}\n"
        f"Username: @{user.username}\n"
        f"First Name: {user.first_name}\n"
        f"Last Name: {user.last_name}\n"
        f"Language: {user.language_code}\n"
        f"Chat Type: {chat.type}\n"
        f"Chat ID: {chat.id}\n"
        f"Message Text: {message.text}"
    )
#Comands______________________________________________________________________________

# Start/ registring
@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    log_user_info(message)    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success = await register_user(message.from_user.id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Menu Generator Bot!\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –∫—Ä–∞—Å–∏–≤–æ–µ –º–µ–Ω—é –¥–ª—è –≤–∞—à–µ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è. "
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=get_main_buttons()
        )
        
        if not success:
            logger.error(f"Failed to register user {message.from_user.id}")
            
    except Exception as e:
        logger.error(f"Error in cmd_start: {str(e)}")
        logger.error(traceback.format_exc())
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=get_main_buttons()
        )
#User register or auth
async def register_user(user_id: int) -> bool:
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        logger.info(f"Attempting to register user {user_id} with API at {API_URL}")
        async with aiohttp.ClientSession() as session:
            url = f"{API_URL}/register_user?tid={user_id}"
            logger.info(f"Making POST request to {url}")
            
            async with session.post(url) as resp:
                response_text = await resp.text()
                logger.info(f"API response status: {resp.status}, body: {response_text}")
                
                # –î–∞–∂–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (409), —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ —É—Å–ø–µ—Ö–æ–º
                if resp.status in (200, 409):
                    try:
                        user_data = await resp.json()
                        logger.info(f"User {user_id} processed successfully: {user_data}")
                    except:
                        logger.warning(f"Could not parse JSON response for user {user_id}")
                    return True
                else:
                    logger.error(f"Failed to register user {user_id}: {response_text}")
                    return False
                    
    except Exception as e:
        logger.error(f"Error registering user {user_id}: {str(e)}")
        logger.error(traceback.format_exc())
        return False
# –°–æ–∑–¥–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é_________________________________________________________________
@dp.callback_query(lambda c: c.data == "create_org")
async def create_org_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"""
    await callback_query.message.edit_text(
        text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:"
    )
    await state.set_state(OrganizationStates.waiting_for_name)
    await callback_query.answer()

@dp.message(OrganizationStates.waiting_for_name)
async def process_org_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"""
    await state.update_data(org_name=message.text)
    await message.answer(
        text="–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:"
    )
    await state.set_state(OrganizationStates.waiting_for_description)

@dp.message(OrganizationStates.waiting_for_description)
async def process_org_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"""
    await state.update_data(org_description=message.text)    
    keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üìã –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –º–µ–Ω—é", callback_data="upload_menu_file")],
                [InlineKeyboardButton(text="üìã –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–Ω—é —á–µ—Ä–µ–∑ GOOGLE sheets", callback_data="upload_menu_sheets")]                
            ]
        )
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ state
    data = await state.get_data()
    org_name = data.get('org_name', '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏')
    
    await message.answer(
        f"‚úÖ –í—ã–±–µ—Ä–µ—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é '{org_name}'\n\n",
        reply_markup=keyboard
    )
    await state.set_state(OrganizationStates.waiting_for_type)

@dp.callback_query(lambda c: c.data in ["upload_menu_file", "upload_menu_sheets"])
async def process_menu_type_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é"""
    await state.update_data(type_of_menu_upload=callback_query.data)
    
    if callback_query.data == "upload_menu_file":
        await callback_query.message.edit_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –º–µ–Ω—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV –∏–ª–∏ Excel."
        )
    else:
        await callback_query.message.edit_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä Google —Ç–∞–±–ª–∏—Ü—ã."
        )
    
    await state.set_state(OrganizationStates.waiting_for_menu)
    await callback_query.answer()

@dp.message(OrganizationStates.waiting_for_menu)
async def process_org_menu(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –º–µ–Ω—é"""
    data = await state.get_data()
    upload_type = data.get('type_of_menu_upload')
    
    if upload_type == "upload_menu_file":
        if not message.document:
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –º–µ–Ω—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV –∏–ª–∏ Excel."
            )
            return
            
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file_id = message.document.file_id
            file = await bot.get_file(file_id)
            file_path = f"temp_{file_id}.{message.document.file_name.split('.')[-1]}"
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            await bot.download_file(file.file_path, file_path)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ API
            async with aiohttp.ClientSession() as session:
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                async with session.post(f"{API_URL}/register_user?tid={message.from_user.id}") as resp:
                    if resp.status != 200:
                        raise Exception(f"Failed to register user: {await resp.text()}")
                    user = await resp.json()
                
                # –°–æ–∑–¥–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
                form_data = aiohttp.FormData()
                form_data.add_field('name', data['org_name'])
                form_data.add_field('description', data['org_description'])
                form_data.add_field('owner_id', str(user['id']))
                
                async with session.post(f"{API_URL}/organizations", data=form_data) as resp:
                    if resp.status != 200:
                        raise Exception(f"Failed to create organization: {await resp.text()}")
                    org = await resp.json()
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ–Ω—é
                with open(file_path, 'rb') as f:
                    form = aiohttp.FormData()
                    form.add_field('file', f, filename=message.document.file_name)
                    async with session.post(f"{API_URL}/organizations/{org['id']}/menu", data=form) as resp:
                        if resp.status != 200:
                            raise Exception(f"Failed to upload menu: {await resp.text()}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é", callback_data=f"show_menu_{org['id']}")],
                    [InlineKeyboardButton(text="üìã –ó–∞–≥—Ä—É–∑–∏—Ç—å –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data=f"upload_images_{org['id']}")],
                    [InlineKeyboardButton(text="üåê –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—É", callback_data=f"generate_web_{org['id']}")],
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="my_organizations")]
                ]
            )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.remove(file_path)
            
            await message.answer(
                f"‚úÖ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è '{data['org_name']}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n",
                reply_markup=keyboard
            )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
            
        except Exception as e:
            logger.error(f"Error creating organization: {str(e)}")
            await message.answer(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            
    else:  # upload_menu_sheets
        try:
            sheets_id = message.text.strip()
            # TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets
            await message.answer(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ Google Sheets –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
            )
        except Exception as e:
            logger.error(f"Error processing Google Sheets: {str(e)}")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Google Sheets ID."
            )

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

@dp.message(OrganizationStates.waiting_for_description_images)
async def process_org_images(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"""
    await state.update_data(org_description=message.text)
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ü–æ–∑–∏—Ü–∏–π –ú–µ–Ω—é.\n"
        "–§–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–µ–¥—É—é—â–∏–º:\n"
        "–ò–º—è —Ñ–∞–π–ª–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—é –≤ —Ç–∞–±–ª–∏—Ü–µ –º–µ–Ω—é \n"
        "JPG. –ù–µ —é–æ–ª–µ–µ 200–ö–± \n"
    )
    await state.set_state(OrganizationStates.waiting_for_images)

@dp.message(OrganizationStates.waiting_for_images)
async def process_upload_images(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ
        if not message.photo and not message.document:
            await message.answer(
                text="‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º."
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        data = await state.get_data()
        org_id = data.get('org_id')

        if not org_id:
            await message.answer(
                text="‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ."
            )
            return

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        if message.photo:
            file_id = message.photo[-1].file_id
            file = await bot.get_file(file_id)
            file_path = file.file_path
            original_filename = f"photo_{file_id}.jpg"
        else:
            file_id = message.document.file_id
            file = await bot.get_file(file_id)
            file_path = file.file_path
            original_filename = message.document.file_name

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        downloaded_file = await bot.download_file(file_path)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ API
        async with aiohttp.ClientSession() as session:
            form = aiohttp.FormData()
            form.add_field('files', downloaded_file, filename=original_filename)
            
            async with session.post(
                f"{API_URL}/organizations/{org_id}/images",
                data=form
            ) as response:
                if response.status == 200:
                    result = await response.json()
                    logger.info(f"Successfully uploaded image: {result}")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö
                    images = data.get('_images', [])
                    images.extend(result['uploaded_images'])
                    await state.update_data(_images=images)
                    
                    await message.answer(
                        text="‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!\n"
                        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞–≤–µ—Ä—à–∏—Ç—å' –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.",
                        reply_markup=get_back_to_org_buttons(org_id)
                    )
                else:
                    error_text = await response.text()
                    logger.error(f"Error uploading image: {error_text}")
                    await message.answer(
                        text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                    )

    except Exception as e:
        logger.error(f"Error in process_upload_images: {str(e)}")
        logger.error(traceback.format_exc())
        await message.answer(
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )

@dp.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main_callback(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(
        "üëã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n",
        reply_markup=get_main_buttons()
    )
    await callback_query.answer()

async def show_organization_menu(message: Message, org_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"""
    try:
        async with aiohttp.ClientSession() as session:
            # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            async with session.get(f"{API_URL}/organizations/{org_id}/menu") as resp:
                if resp.status != 200:
                    raise Exception(f"Failed to get menu: {await resp.text()}")
                menu_items = await resp.json()                
                if not menu_items:
                    await message.answer("üìã –ú–µ–Ω—é –ø—É—Å—Ç–æ")
                    return                
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –±–ª—é–¥–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                categories = {}
                for item in menu_items:
                    if item['is_available']:
                        category = item['category']
                        if category not in categories:
                            categories[category] = []
                        categories[category].append(item)                
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                menu_text = "üìã –ù–∞—à–µ –º–µ–Ω—é:\n\n"                
                for category, items in categories.items():
                    menu_text += f"üçΩ {category}:\n"
                    for item in items:
                        price = float(item['price'])
                        menu_text += f"‚Ä¢ {item['name']} - {price:.2f} ‚ÇΩ\n"
                        if item.get('description'):
                            menu_text += f"  {item['description']}\n"
                    menu_text += "\n"                
                await message.answer(menu_text)
    except Exception as e:
        logger.error(f"Error showing menu: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query(lambda c: c.data.startswith("show_menu_"))
async def show_menu_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ–Ω—é"""
    org_id = int(callback_query.data.split("_")[2])
    await show_organization_menu(callback_query.message, org_id)
    await callback_query.answer()
#–ö–Ω–æ–ø–∫–∞ –ú–æ–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
@dp.callback_query(lambda c: c.data == "my_organizations")
async def my_organizations_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏'"""
    try:
        async with aiohttp.ClientSession() as session:
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            async with session.get(f"{API_URL}/users/telegram/{callback_query.from_user.id}") as resp:
                if resp.status != 200:
                    raise Exception(f"Failed to get user: {await resp.text()}")
                user = await resp.json()
        # –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ ID –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            async with session.get(f"{API_URL}/organizations?owner_id={user['id']}") as resp:
                if resp.status != 200:
                    raise Exception(f"Failed to get organizations: {await resp.text()}")
                organizations = await resp.json()

            if not organizations:
                await callback_query.message.edit_text(
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π.",
                    reply_markup=get_main_buttons()
                )
                return
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text=org['name'], callback_data=f"org_actions_{org['id']}")]
                    for org in organizations
                ] + [[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
            )
            await callback_query.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é:",
                reply_markup=keyboard
            )
    except Exception as e:
        logger.error(f"Error fetching organizations: {str(e)}")
        await callback_query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_buttons()
        )
    await callback_query.answer()

@dp.callback_query(lambda c: c.data.startswith("org_actions_"))
async def organization_actions_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π"""
    org_id = int(callback_query.data.split("_")[2])    
    try:
        async with aiohttp.ClientSession() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            async with session.get(f"{API_URL}/organizations/{org_id}") as resp:
                if resp.status != 200:
                    raise Exception(f"Failed to get organization: {await resp.text()}")
                org = await resp.json()
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é", callback_data=f"show_menu_{org_id}")],
                    [InlineKeyboardButton(text="üìã –ó–∞–≥—Ä—É–∑–∏—Ç—å –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data=f"upload_images_{org_id}")],
                    [InlineKeyboardButton(text="üåê –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—É", callback_data=f"generate_web_{org_id}")],
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="my_organizations")]
                ]
            )
            await callback_query.message.edit_text(
                f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {org['name']}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {org['description'] or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=keyboard
            )
    except Exception as e:
        logger.error(f"Error in organization actions: {str(e)}")
        await callback_query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_buttons()
        )
    await callback_query.answer()
# Generate Menu Page
@dp.callback_query(lambda c: c.data.startswith("generate_web_"))
async def generate_web_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–µ–Ω—é"""
    org_id = int(callback_query.data.split('_')[-1])
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –≤–∞—à–µ–≥–æ –º–µ–Ω—é:",
        reply_markup=get_theme_buttons(org_id)
    )
    await callback_query.answer()

@dp.callback_query(lambda c: c.data.startswith("theme_"))
async def theme_selected_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è"""
    data = callback_query.data.split('_')    
    theme= data[-1]
    org_id = int(data[-2])
    try:
        async with aiohttp.ClientSession() as session:
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            async with session.get(f"{API_URL}/organizations/{org_id}") as resp:
                if resp.status != 200:
                    raise Exception(f"Failed to get organization: {await resp.text()}")
                org = await resp.json()
        async with aiohttp.ClientSession() as session:
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–Ω—é
            async with session.get(f"{API_URL}/organizations/{org_id}/menu") as resp:
                if resp.status != 200:
                    raise Exception(f"Failed to get organization: {await resp.text()}")
                menu_items = await resp.json()
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        content = {}
        for item in menu_items:            
            if item['category'] not in content:
                content[item['category']] = []
            entity = {'name': item['name'],
                      'price': item['price'],
                      'description': item['description'],
                      'subcategory': item['subcategory']}
            content[item['category']].append(entity)        
        data = {'page_name': org['menu_table_name'],
                'title': org['name'],
                'description': org['description'],
                'theme': theme,
                'content': content
                   }
    except Exception as e:
        logger.error(f"Error in organization actions: {str(e)}")
    try:
    #Menu Generation
        async with aiohttp.ClientSession() as session:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            async with session.post(f"{GEN_URL}/generate", json=data) as resp:
                if resp.status == 200:
                    result = await resp.json()
                    menu_url = result.get('url')
                    await callback_query.message.edit_text(
                        f"‚úÖ –í–∞—à–µ –º–µ–Ω—é —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!\n\n"
                        f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –º–µ–Ω—é: {menu_url}\n\n"
                        f"–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å –≤–∞—à–∏–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏.",
                        reply_markup=get_back_to_org_buttons(org_id)
                    )
                else:
                    error_text = await resp.text()
                    await callback_query.message.edit_text(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é: {error_text}",
                        reply_markup=get_back_to_org_buttons(org_id)
                    )
    except Exception as e:
        logger.error(f"Error generating menu: {str(e)}")
        await callback_query.message.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é: {str(e)}",
            reply_markup=get_back_to_org_buttons(org_id)
        )
    await callback_query.answer()

#Help menu 
@dp.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    log_user_info(message)
    
    help_text = (
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/menu - –ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ–Ω—é\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )
    
    await message.answer(help_text)
#____________________________________________________________________________________________________________
if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))