import os
import aiohttp
from aiogram import Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from app.bot.infrastructure.handlers.base_handler import BaseHandler
from app.bot.infrastructure.logging.logger import Logger
from app.bot.infrastructure.keyboards.organization_keyboard import get_back_to_org_buttons

class ThemeHandler(BaseHandler):
    """Handler for theme-related operations"""
    
    def __init__(self, bot: Bot, logger: Logger):
        super().__init__(bot, logger)
        self.api_url = os.getenv("API_URL")
        
    async def handle_show_themes(self, callback_query: CallbackQuery):
        """Show available themes"""
        org_id = int(callback_query.data.split("_")[2])
        try:
            async with aiohttp.ClientSession() as session:
                # Get available themes
                async with session.get(f"{self.api_url}/themes") as resp:
                    if resp.status != 200:
                        raise Exception(f"Failed to get themes: {await resp.text()}")
                    themes = await resp.json()
                    
                    if not themes:
                        await callback_query.message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º")
                        return
                        
                # Create keyboard with themes
                keyboard = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text=theme['name'], callback_data=f"select_theme_{org_id}_{theme['id']}")]
                        for theme in themes
                    ] + [[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"org_actions_{org_id}")]]
                )
                
                await callback_query.message.answer(
                    "üé® –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:",
                    reply_markup=keyboard
                )
                
        except Exception as e:
            self.logger.error(f"Error showing themes: {str(e)}")
            await callback_query.message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            
    async def handle_select_theme(self, callback_query: CallbackQuery):
        """Handle theme selection"""
        _, _, org_id, theme_id = callback_query.data.split("_")
        org_id = int(org_id)
        theme_id = int(theme_id)
        
        try:
            async with aiohttp.ClientSession() as session:
                # Update organization theme
                async with session.put(
                    f"{self.api_url}/organizations/{org_id}/theme",
                    json={"theme_id": theme_id}
                ) as resp:
                    if resp.status != 200:
                        raise Exception(f"Failed to update theme: {await resp.text()}")
                        
                await callback_query.message.answer(
                    "‚úÖ –¢–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!",
                    reply_markup=get_back_to_org_buttons(org_id)
                )
                
        except Exception as e:
            self.logger.error(f"Error selecting theme: {str(e)}")
            await callback_query.message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            
    async def handle_preview_theme(self, callback_query: CallbackQuery):
        """Show theme preview"""
        _, _, org_id, theme_id = callback_query.data.split("_")
        org_id = int(org_id)
        theme_id = int(theme_id)
        
        try:
            async with aiohttp.ClientSession() as session:
                # Get theme preview
                async with session.get(f"{self.api_url}/themes/{theme_id}/preview") as resp:
                    if resp.status != 200:
                        raise Exception(f"Failed to get theme preview: {await resp.text()}")
                    preview = await resp.json()
                    
                # Create keyboard with preview options
                keyboard = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ–º—É", callback_data=f"select_theme_{org_id}_{theme_id}")],
                        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º", callback_data=f"show_themes_{org_id}")]
                    ]
                )
                
                await callback_query.message.answer(
                    f"üé® –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–º—ã:\n\n{preview['description']}",
                    reply_markup=keyboard
                )
                
        except Exception as e:
            self.logger.error(f"Error showing theme preview: {str(e)}")
            await callback_query.message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            ) 